// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Meanscompute
arma::mat Meanscompute(const arma::mat& X_data, const arma::vec& y_data, const arma::uword& Nclasses, const arma::uword& p);
RcppExport SEXP _solda_Meanscompute(SEXP X_dataSEXP, SEXP y_dataSEXP, SEXP NclassesSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_data(X_dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type Nclasses(NclassesSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Meanscompute(X_data, y_data, Nclasses, p));
    return rcpp_result_gen;
END_RCPP
}
// Predictions_lambdasolo
arma::vec Predictions_lambdasolo(const arma::mat& Means_mat, const arma::vec& y_data, const arma::mat& X_new, const arma::uword& Nclasses, const arma::mat& Theta_lambda);
RcppExport SEXP _solda_Predictions_lambdasolo(SEXP Means_matSEXP, SEXP y_dataSEXP, SEXP X_newSEXP, SEXP NclassesSEXP, SEXP Theta_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Means_mat(Means_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_new(X_newSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type Nclasses(NclassesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_lambda(Theta_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Predictions_lambdasolo(Means_mat, y_data, X_new, Nclasses, Theta_lambda));
    return rcpp_result_gen;
END_RCPP
}
// CV_Ensemble_EN
arma::vec CV_Ensemble_EN(const arma::mat& X_data, const arma::vec& y_data, const arma::mat& lambdas_grid, const arma::uword& Nclasses, const arma::uword& num_folds, const double& tolerance, unsigned long& max_iter, const arma::uword& num_threads, const arma::mat& MV_matrix);
RcppExport SEXP _solda_CV_Ensemble_EN(SEXP X_dataSEXP, SEXP y_dataSEXP, SEXP lambdas_gridSEXP, SEXP NclassesSEXP, SEXP num_foldsSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP num_threadsSEXP, SEXP MV_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_data(X_dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambdas_grid(lambdas_gridSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type Nclasses(NclassesSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_folds(num_foldsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< unsigned long& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MV_matrix(MV_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_Ensemble_EN(X_data, y_data, lambdas_grid, Nclasses, num_folds, tolerance, max_iter, num_threads, MV_matrix));
    return rcpp_result_gen;
END_RCPP
}
// Ensemble_EN_Opt
arma::mat Ensemble_EN_Opt(const arma::mat& X_data, const arma::mat& Means_matrix, const double& lambdas_sparsity, const double& lambda_diversity, const arma::uword& num_groups, const double& tolerance, unsigned long& max_iter, const arma::mat& MV_matrix);
RcppExport SEXP _solda_Ensemble_EN_Opt(SEXP X_dataSEXP, SEXP Means_matrixSEXP, SEXP lambdas_sparsitySEXP, SEXP lambda_diversitySEXP, SEXP num_groupsSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP MV_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_data(X_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Means_matrix(Means_matrixSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdas_sparsity(lambdas_sparsitySEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_diversity(lambda_diversitySEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_groups(num_groupsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< unsigned long& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MV_matrix(MV_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(Ensemble_EN_Opt(X_data, Means_matrix, lambdas_sparsity, lambda_diversity, num_groups, tolerance, max_iter, MV_matrix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_solda_Meanscompute", (DL_FUNC) &_solda_Meanscompute, 4},
    {"_solda_Predictions_lambdasolo", (DL_FUNC) &_solda_Predictions_lambdasolo, 5},
    {"_solda_CV_Ensemble_EN", (DL_FUNC) &_solda_CV_Ensemble_EN, 9},
    {"_solda_Ensemble_EN_Opt", (DL_FUNC) &_solda_Ensemble_EN_Opt, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_solda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
